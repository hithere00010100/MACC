! Variables
! ----------------------------------------------------------------------------------------------
! Create variables
int i, iRowsNumber, iCheckboxState, iProjectId;
double dActivePower, dVoltage;
string sRowId, sRowLabel, sMainNodeName, sAltNodeName;
set aEditSet;
object oReport;

! Fill them
oReport = this.GetParent();
aEditSet.Add(tValues);
! ----------------------------------------------------------------------------------------------

! Window and header
! ----------------------------------------------------------------------------------------------
! Set window specs
oReport.SetTitle('Generation Projects');
oReport.SetDialogSize(600, 450);

! Set header
oReport.AddHeader('Add and select generation projects to evaluate', '');
! ----------------------------------------------------------------------------------------------

! Buttons
! ----------------------------------------------------------------------------------------------
! Add project
oReport.AddButton('add', 'Add', 100, 0, 1);

! Delete selected projects
oReport.AddButton('delete', 'Delete', 100, 0, 1);

! Select all projects
oReport.AddButton('selectAll', 'Select all', 100, 0, 1);

! Deselect all projects
oReport.AddButton('deselectAll', 'Deselect all', 100, 0, 1);

! Execute selected projects
oReport.AddButton('execute', 'Execute', 100, 1, 1);
! ----------------------------------------------------------------------------------------------

! Table basic structure
! ----------------------------------------------------------------------------------------------
oReport.AddTable('table');

! Add table columns
oReport.AddColumn('table', 'selectColumn', '', 30, 0, 0);
oReport.AddColumn('table', 'idColumn', 'ID', 30, 0, 0);
oReport.AddColumn('table', 'mainNodeColumn', 'Main\nnode', 100, 0, 0);
oReport.AddColumn('table', 'altNodeColumn', 'Alternative\nnode', 100, 0, 0);
oReport.AddColumn('table', 'voltageColumn', 'V\n[kV]', 100, 0, 0);
oReport.AddColumn('table', 'activePowerColumn', 'P\n[MW]', 100, 0, 0);
! ----------------------------------------------------------------------------------------------

! Table rows
! ----------------------------------------------------------------------------------------------
! Get matrix rows number
iRowsNumber = tValues.GetNumberOfRows();

! Add as many rows as there are rows in the matrix
for(i = 1; i <= iRowsNumber; i += 1){
  ! Add a row with ID starting from 1
  sRowId = sprintf('%i', i);
  oReport.AddRow('table', sRowId);
  
  ! Fill first cell with a checkbox
  iCheckboxState = tValues.Get(i, 1);
  oReport.SetCellValueToCheckbox('table', 'selectColumn', sRowId, iCheckboxState, 'Double click to change state', 2);
  
  ! Fill second cell with the id
  iProjectId = tValues.Get(i, 2);
  oReport.SetCellValueToInt('table', 'idColumn', sRowId, iProjectId);
  
  ! Fill third and fourth cell with the selected node (contained in the matrix row label)
  sRowLabel = tValues.GetRowLabel(i);
  sscanfsep(sRowLabel, '%s %s', sMainNodeName, sAltNodeName, '-');
  
  oReport.SetCellValueToString('table', 'mainNodeColumn', sRowId, sMainNodeName );
  oReport.SetCellValueToString('table', 'altNodeColumn', sRowId, sAltNodeName);
  
  ! Fill next cells with the generation project voltage and active power
  dVoltage = tValues.Get(i, 3);
  oReport.SetCellValueToDouble('table', 'voltageColumn', sRowId, dVoltage, '%.2f');
  
  dActivePower = tValues.Get(i, 4);
  oReport.SetCellValueToDouble('table', 'activePowerColumn', sRowId, dActivePower, '%.2f');
  
  ! Make checkboxes clickable and voltages and active powers editable
  oReport.SetCellEdit('table', 'selectColumn', sRowId, aEditSet);
  oReport.SetCellEdit('table', 'voltageColumn', sRowId, aEditSet);
  oReport.SetCellEdit('table', 'activePowerColumn', sRowId, aEditSet);
}
! ----------------------------------------------------------------------------------------------

