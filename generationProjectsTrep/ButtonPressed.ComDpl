! Variables
! ----------------------------------------------------------------------------------------------
! Create variables
int iCompare, a, iRowsNumber, iCheckboxState, isFinished, iNewRowId, iProjectId, iNextProjectId;
double dActivePower, dVoltage, dNodeVoltage;
string sMainNodeName, sAltNodeName, sRowLabel;
set aNodes, aMainNodes, aAltNodes, aFilteredNodes;
object oMainNode, oAltNode, oNode;

! Fill them
aNodes = GetCalcRelevantObjects('*.ElmTerm');
! ----------------------------------------------------------------------------------------------

! Add project
! ----------------------------------------------------------------------------------------------
! Detect when this button is pressed
iCompare = strcmp(sButtonId, 'add');

if(iCompare = 0){
  ! Get matrix rows number and calculate the next row number
  iRowsNumber = tValues.GetNumberOfRows();
  iNewRowId = iRowsNumber + 1;
  
  ! Add a new matrix row with a checkbox value of zero (first column)
  tValues.Set(iNewRowId, 1, 0);
  
  ! Get current ID based on how many rows the counter has and set it as the new project ID
  iProjectId = vCounter.Size();
  tValues.Set(iNewRowId, 2, iProjectId);
  
  ! Step up ID for a future new project
  iNextProjectId = iProjectId + 1;
  vCounter.Resize(iNextProjectId);
  
  vCounter.Save();
  
  ! Store voltage and active power defined by the user and put them as new values on the new
  ! row in the matrix (third and fourth column)
  input(dVoltage, 'Define generation project voltage');
  input(dActivePower, 'Define generation project active power');
  
  tValues.Set(iNewRowId, 3, dVoltage);
  tValues.Set(iNewRowId, 4, dActivePower);
  
  ! Go through every system node to store in a new set only the ones that have the same voltage given
  ! by the user
  for(oNode = aNodes.First(); oNode; oNode = aNodes.Next()){
    dNodeVoltage = oNode:e:uknom;
    
    if(dNodeVoltage = dVoltage){
      aFilteredNodes.Add(oNode);
    }
  }
  
  ! Show a menu with all the nodes with the given voltage
  aMainNodes = ShowModalSelectBrowser(aFilteredNodes, 'Select main node');
  aAltNodes = ShowModalSelectBrowser(aFilteredNodes, 'Select alternative node');
  
  ! Get the first selected node of each menu
  oMainNode = aMainNodes.First();
  oAltNode = aAltNodes.First();

  ! Concatenate both main node and alternative node names separated by a dash
  sMainNodeName = oMainNode:loc_name;
  sAltNodeName = oAltNode:loc_name;
  sRowLabel = sprintf('%s-%s', sMainNodeName, sAltNodeName);
  
  ! Set that concatenation as the new row label
  tValues.SetRowLabel(iNewRowId, sRowLabel);
  
  ! Name every matrix column
  tValues.SetColumnLabel(1, 'checkboxState');
  tValues.SetColumnLabel(2, 'id');
  tValues.SetColumnLabel(3, 'voltage');
  tValues.SetColumnLabel(4, 'activePower');
}
! ----------------------------------------------------------------------------------------------

! Delete selected projects
! ----------------------------------------------------------------------------------------------
! Detect when this button is pressed
iCompare = strcmp(sButtonId, 'delete');

if(iCompare = 0){
  ! Get matrix rows number
  iRowsNumber = tValues.GetNumberOfRows();
  
  a = 1;
  isFinished = 0;
  
  while(isFinished = 0){
    ! Stop loop when the index exceeds the rows number
    if(a >= iRowsNumber){
      isFinished = 1;
    }
    
    ! Get every generation project checkbox state
    iCheckboxState = tValues.Get(a, 1);
    
    if(iCheckboxState = 1){
      ! Put at the end of the matrix the ticked rows
      tValues.SortToColumn(1);
      
      ! Reduce rows number by one and resize the matrix to leave the ticked row behind
      iRowsNumber -= 1;
      tValues.Resize(iRowsNumber, 3);
      
      ! Evaluate next project which has now the row id of the delete row
      a -= 1;
    }
    
    ! Increase search space to avoid infinite loop
    a += 1;
  }
}
! ----------------------------------------------------------------------------------------------

! Select all projects
! ----------------------------------------------------------------------------------------------
! Detect when this button is pressed
iCompare = strcmp(sButtonId, 'selectAll');

if(iCompare = 0){
  ! Tick all checkboxes
  iRowsNumber = tValues.GetNumberOfRows();
  
  for(a = 1; a <= iRowsNumber; a += 1){
    tValues.Set(a, 1, 1);
  }
}
! ----------------------------------------------------------------------------------------------

! Deselect all projects
! ----------------------------------------------------------------------------------------------
! Detect when this button is pressed
iCompare = strcmp(sButtonId, 'deselectAll');

if(iCompare = 0){
  ! Untick all checkboxes
  iRowsNumber = tValues.GetNumberOfRows();
  
  for(a = 1; a <= iRowsNumber; a += 1){
    tValues.Set(a, 1, 0);
  }
}
! ----------------------------------------------------------------------------------------------

! Execute selected projects
! ----------------------------------------------------------------------------------------------
! Detect when this button is pressed
iCompare = strcmp(sButtonId, 'execute');

if(iCompare = 0){
  contingenciesSelection.Execute();
}
! ----------------------------------------------------------------------------------------------

! Save all modifications that values matrix could have
tValues.Save();
